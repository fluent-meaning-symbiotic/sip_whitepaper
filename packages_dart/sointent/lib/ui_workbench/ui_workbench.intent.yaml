semantic_intent:
  version: 1
  name: UiWorkbenchScreen
  type: SemanticUiIntent
  meaning: |
    Main workbench screen that provides a comprehensive interface for managing semantic intents.
    Implements a three-panel layout for efficient intent management workflow.
  description: |
    The workbench screen is the primary interface for managing semantic intents.
    It uses a three-panel layout to provide a clear workflow:
    - Left panel: List of all semantic intents with search and filtering
    - Center panel: Detailed editor for the selected intent (UiIntentEditor)
    - Right panel: Command controls and actions for the selected intent (UiIntentControls)
    All panels have draggable vertical dividers in between them to allow for resizing.
  semantic_properties:
    layout:
      type: ThreeColumnLayout
      columns:
        - id: intents_list
          width: 0.25 # 25% of screen width
        - id: intent_editor
          width: 0.5 # 50% of screen width
        - id: intent_commands
          width: 0.25 # 25% of screen width

  semantic_interactions:
    - event: onIntentSelected
      command: LoadIntentCommand
    - event: onIntentCreated
      command: CreateIntentCommand
    - event: onIntentDeleted
      command: DeleteIntentCommand
  output_artifacts:
    - type: dart_widget
      path: ui_workbench/ui_workbench.dart
    - type: dart_test
      path: ui_workbench/ui_workbench_test.dart
  llm_prompts:
    widget_generation: |
      Generate a Flutter widget implementing a three-panel layout with:
      - Responsive design supporting different screen sizes
      - Material Design 3 components
      - Proper state management using provided resources
  scratchpad_todo:
    # Core Functionality
    - Implement selected intent state in AppStateResource
      - Add selectedIntentName field
      - Add setSelectedIntent method
      - Update UI to reflect selection state

    # Center Panel - Intent Editor
    - Connect editor to selected intent
    - Implement YAML validation
    - Add syntax highlighting
    - Add auto-completion
    - Add error highlighting
    - Implement undo/redo functionality

    # Right Panel - Controls
    - Implement CreateIntentCommand
      - Add command class
      - Add handler
      - Connect to UI
    - Implement SaveIntentCommand
      - Add command class
      - Add handler
      - Connect to UI
    - Implement DeleteIntentCommand
      - Add command class
      - Add handler
      - Add confirmation dialog

    # Layout & UX
    - Add minimum width constraints for panels
    - Save panel sizes to preferences
    - Add panel collapse/expand functionality
    - Add keyboard shortcuts
      - Ctrl+S for save
      - Ctrl+N for new
      - Delete for delete
    - Add drag-and-drop for intent reordering

    # Error Handling
    - Add error states to AppStateResource
    - Implement error boundaries
    - Add error notifications
    - Add loading states

    # Testing
    - Write widget tests
    - Write command tests
    - Write integration tests
