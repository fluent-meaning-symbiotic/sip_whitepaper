semantic_intent:
  version: 1
  name: McpServerIntent
  type: SemanticApiIntent
  meaning: "MCP (Model Context Protocol) server for managing Semantic Intents, providing standardized communication between AI agents and the SIP system"
  description: |
    Implements the Model Context Protocol server that:
    - Manages Semantic Intents through standardized MCP tools
    - Provides WebSocket-based communication
    - Handles file attachments and context
    - Integrates with LLMs for intent generation and modification

  semantic_properties:
    server_config:
      host: string
      port: number
      llm_provider: string
      llm_api_key: string

    supported_tools:
      - name: create_intent
        description: "Creates a new semantic intent from natural language description"
        parameters:
          description: string
          path: string?
          initial_yaml: string?

      - name: modify_intent
        description: "Modifies an existing semantic intent"
        parameters:
          path: string
          changes: string

      - name: refactor_intents
        description: "Refactors multiple semantic intents"
        parameters:
          paths: string[]
          changes: string

      - name: generate_artifacts
        description: "Generates implementation artifacts from intent"
        parameters:
          path: string
          type: string?

      - name: update_intent_from_implementation
        description: "Updates intent based on implementation changes"
        parameters:
          path: string
          code: string

  semantic_validations:
    - "All tool responses must follow MCP protocol format"
    - "File paths must be validated against workspace root"
    - "LLM interactions must handle rate limits and errors"
    - "WebSocket connections must be authenticated"
    - "File attachments must be validated for size and type"

  output_artifacts:
    - lib/mcp/server.dart
    - lib/mcp/tools/
    - lib/mcp/handlers/
    - lib/mcp/models/
    - lib/mcp/websocket/

  llm_prompts:
    server:
      description: "Generate MCP server implementation"
      context: |
        The server should:
        - Use WebSocket for communication
        - Follow MCP message format
        - Handle file attachments
        - Manage tool execution
        - Integrate with LLMs
        - Provide proper error handling

    tools:
      description: "Generate MCP tool implementations"
      context: |
        Each tool should:
        - Follow MCP tool format
        - Handle file system operations safely
        - Integrate with LLMs when needed
        - Provide proper error handling
        - Return standardized responses
